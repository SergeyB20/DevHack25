from aiogram import types, executor, Dispatcher, Bot
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, ParseMode
from datetime import datetime
import time, random, sqlite3, os, datetime
from forms import Form
from config import *

PASSWORD = PASSWORD_TEACH
TOKEN = TOKEN_BOT
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

db = sqlite3.connect('server.db')
sql = db.cursor()



# –ù–ê–ß–ê–õ–û, –°–û–•–†–ê–ù–ï–ù–ò–ï ID –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –í –ë–î
@dp.message_handler(commands=['start'])
async def StartFunction(message: types.Message):
    user_id = message.from_user.id

    if user_id == 80972326:
        await message.answer(f'<b>–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏!\n</b> <i> –ß—Ç–æ-–±—ã –æ—Ç–≤–µ—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –∑–∞–¥–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –≤–≤–æ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ –¥–∞–Ω–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É\n\n[–Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]\n[—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è]</i>', parse_mode=ParseMode.HTML)
        await Form.support.set()
    
    else:
        sql.execute(f"INSERT INTO users (ID) VALUES ({user_id})")
        db.commit()

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn = types.KeyboardButton(text=f'—Å—Ç—É–¥–µ–Ω—Ç', resize_keyboard=True)
        btn1 = types.KeyboardButton(text=f'–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', resize_keyboard=True)
        keyboard.add(btn, btn1)

        await bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç üëã, –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!\n–ö–µ–º —Ç—ã —è–≤–ª—è–µ—à—å—Å—è? \n[—Å—Ç—É–¥–µ–Ω—Ç/–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å]', reply_markup=keyboard)
        await Form.category.set()

# –°–û–•–†–ê–ù–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –í –ë–î (–°–¢–£–î–ï–ù–¢ –ò–õ–ò –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–¨)
@dp.message_handler(state=Form.category)
async def SetCategory(message: types.Message):
    user_id = message.from_user.id
    msg = message.text

    if msg.lower() == '—Å—Ç—É–¥–µ–Ω—Ç':
        sql.execute(f"UPDATE users SET CATEGORY='{msg.lower()}' WHERE ID={user_id}")
        db.commit()
        await message.answer('‚úèÔ∏è–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É')
        await Form.NumGroup.set()

    if msg.lower() == '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å':
        sql.execute(f"UPDATE users SET CATEGORY='{msg.lower()}' WHERE ID={user_id}")
        db.commit()
        await message.answer('‚úèÔ∏è–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û [–ò–≤–∞–Ω–æ–≤ –ò.–ò.]')
        await Form.NumGroup.set()

# –°–û–•–†–ê–ù–ï–ù–ò–ï –ù–û–ú–ï–†–ê –ì–†–£–ü–ü–´/–§–ò–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –í –ë–î
@dp.message_handler(state=Form.NumGroup)
async def SetNumGroup(message: types.Message):
    user_id = message.from_user.id
    msg = message.text
    for category in sql.execute(f"SELECT CATEGORY FROM users WHERE ID={user_id}"):
        if category[0].lower()  == '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å':
            sql.execute(f"UPDATE users SET NUMGROUP='{msg}' WHERE ID={user_id}")
        if category[0].lower()  == '—Å—Ç—É–¥–µ–Ω—Ç':
            sql.execute(f"UPDATE users SET NUMGROUP='{msg.lower()}' WHERE ID={user_id}")
    db.commit()

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn = types.KeyboardButton(text=f'–î–∞')
    btn1 = types.KeyboardButton(text=f'–ù–µ—Ç')
    keyboard.add(btn,btn1)

    await message.answer('–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏?', reply_markup=keyboard)
    await Form.Mailing.set()


# –í–ù–û–° –í –ë–î –†–ê–ó–†–ï–®–ï–ù–ò–ï –û –†–ê–°–°–´–õ–ö–ï, –ï–°–õ–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ü–†–ï–ü–û–î –ü–ï–†–ï–í–û–î–ò–¢ –ï–ì–û –ö –í–í–û–î–£ –ö–õ–Æ–ß–ê –î–û–°–¢–£–ü–ê
@dp.message_handler(state=Form.Mailing)
async def SetMailing(message: types.Message):
    user_id = message.from_user.id
    msg = message.text

    if msg.lower() == '–¥–∞':
        sql.execute(f"UPDATE users SET MAILING={1} WHERE ID={user_id}")
        db.commit()
        for NumGroup in sql.execute(f"SELECT NUMGROUP FROM users WHERE ID={user_id}"):
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn = types.KeyboardButton(text=f'–ü–∞—Ä—ã {str(NumGroup[0]).upper()}')
            btn1 = types.KeyboardButton(text=f'–ü–∞—Ä—ã –Ω–∞ –Ω–µ–¥–µ–ª—é {str(NumGroup[0]).upper()}')
            btn2 = types.KeyboardButton(text=f'–ü–æ–º–æ—â—å/FAQ')
            btn3 = types.KeyboardButton(text=f'–ü–ª–∞–Ω—à–µ—Ç–∫–∞ {NumGroup[0].upper()}')
            keyboard.add(btn, btn1, btn2, btn3)

        for category in sql.execute(f"SELECT CATEGORY FROM users WHERE ID={user_id}"):
            category = category[0]

        if category.lower() == '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å':
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞')
            await Form.TeachPass.set()
        else:
            await message.answer_sticker(sticker='https://github.com/TelegramBots/book/raw/master/src/docs/sticker-fred.webp')
            await message.answer('–ù–∞ —ç—Ç–æ–º –≤—Å—ë, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞!', reply_markup=keyboard)
            await Form.Meny.set()

    if msg.lower() == '–Ω–µ—Ç':
        sql.execute(f"UPDATE users SET MAILING={0} WHERE ID={user_id}")
        db.commit()

        for NumGroup in sql.execute(f"SELECT NUMGROUP FROM users WHERE ID={user_id}"):
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn = types.KeyboardButton(text=f'–ü–∞—Ä—ã {str(NumGroup[0]).upper()}')
            btn1 = types.KeyboardButton(text=f'–ü–∞—Ä—ã –Ω–∞ –Ω–µ–¥–µ–ª—é {str(NumGroup[0]).upper()}')
            btn2 = types.KeyboardButton(text=f'–ü–æ–º–æ—â—å/FAQ')
            btn3 = types.KeyboardButton(text=f'–ü–ª–∞–Ω—à–µ—Ç–∫–∞ {NumGroup[0].upper()}')
            keyboard.add(btn, btn1, btn2, btn3)

        for category in sql.execute(f"SELECT CATEGORY FROM users WHERE ID={user_id}"):
            category = category[0]

        if category.lower() == '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å':
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞')
            await Form.TeachPass.set()
        else:
            await message.answer_sticker(sticker='https://github.com/TelegramBots/book/raw/master/src/docs/sticker-fred.webp')
            await message.answer('–ù–∞ —ç—Ç–æ–º –≤—Å—ë, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞!', reply_markup=keyboard)
            await Form.Meny.set()


# –ï–°–õ–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ü–†–ï–ü–û–î, –û–ù –í–í–û–î–ò–¢ –ö–õ–Æ–ß –î–û–°–¢–£–ü–ê –ò –ü–û–õ–£–ß–ê–ï–¢ –í–°–ï –§–£–ù–ö–¶–ò–ò
@dp.message_handler(state=Form.TeachPass)
async def SetTeachPass(message: types.Message):
    user_id = message.from_user.id
    msg = message.text

    if msg == PASSWORD:
        for FullName in sql.execute(f"SELECT NUMGROUP FROM users WHERE ID={user_id}"):
            FullName = FullName[0]
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn = types.KeyboardButton(text=f'–ü–∞—Ä—ã {FullName}')
        btn1 = types.KeyboardButton(text=f'–ü–∞—Ä—ã –Ω–∞ –Ω–µ–¥–µ–ª—é {FullName}')
        btn2 = types.KeyboardButton(text=f'–ü–æ–º–æ—â—å/FAQ')
        btn3 = types.KeyboardButton(text=f'–ü–ª–∞–Ω—à–µ—Ç–∫–∞ {FullName}')
        keyboard.add(btn, btn1, btn2, btn3)
        await message.answer('–û—Ç–ª–∏—á–Ω–æ, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏', reply_markup=keyboard)
        await Form.Meny.set()
    else:
        await message.answer('–ü–æ—Ö–æ–∂–µ –≤—ã —á—Ç–æ-—Ç–æ —É–∫–∞–∑–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')




# –ú–ï–ù–Æ, –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô/–ö–û–ú–ê–ù–î –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
@dp.message_handler(state=Form.Meny)
async def SetMailing(message: types.Message):
    user_id = message.from_user.id
    msg = message.text
    
    for category in sql.execute(f"SELECT CATEGORY FROM users WHERE ID={user_id}"):
        category = category[0]
        
    if (len(msg.lower().split(' ')) == 2) and (msg.lower().split(' ')[0] == '–ø–∞—Ä—ã') or (len(msg.lower().split(' ')) == 3) and (msg.lower().split(' ')[0] == '–ø–∞—Ä—ã'):
        for NumGroup in sql.execute(f"SELECT NUMGROUP FROM users WHERE ID={user_id}"):
            NumGroup = NumGroup[0] #–Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∏–ª–∏ –§–ò–û
        # –§–£–ù–ö–¶–ò–Ø –í–´–í–û–î–ê –†–ê–°–ü–ò–°–ê–ù–ò–Ø –ù–ê –î–í–ê –î–ù–Ø (–ì–†–£–ü–ü–´/–ü–†–ï–ü–û–î–ê)
        try:
            StudentParserTwoDays(user_id=user_id, NumGroup=msg.split(' ')[-1].upper())
            with open(f'result/{user_id}.txt', encoding='utf-8') as doc:
                    await message.answer(doc.read())
        except:
            print(f'{msg.split(" ")[-2]} {msg.split(" ")[-1]}')
            ParserTeacherTwoDays(user_id=user_id, fullname=f'{msg.split(" ")[-2]} {msg.split(" ")[-1]}')
            with open(f'result/{user_id}.txt', encoding='utf-8') as doc:
                    await message.answer(doc.read())

    if (len(msg.lower().split(' ')) == 4) and (msg.lower().split(' ')[1] == '–Ω–∞') or (len(msg.lower().split(' ')) == 5) and (msg.lower().split(' ')[0] == '–ø–∞—Ä—ã'):
        for NumGroup in sql.execute(f"SELECT NUMGROUP FROM users WHERE ID={user_id}"):
            NumGroup = NumGroup[0]#–Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∏–ª–∏ –§–ò–û
        try:
            StudentParser(user_id=user_id, NumGroup=msg.split(' ')[-1].upper())
            with open(f'result/{user_id}.txt', encoding='utf-8') as doc:
                    await message.answer(doc.read())
        except:
            ParserTeacher(user_id=user_id, fullname=f'{msg.split(" ")[-2]} {msg.split(" ")[-1]}')
            with open(f'result/{user_id}.txt', encoding='utf-8') as doc:
                    await message.answer(doc.read())

    if msg.lower().split(' ')[0] == '–ø–ª–∞–Ω—à–µ—Ç–∫–∞':
        for NumGroup in sql.execute(f"SELECT NUMGROUP FROM users WHERE ID={user_id}"):
            NumGroup = NumGroup[0]#–Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∏–ª–∏ –§–ò–û

        # –î–û–ë–ê–í–ò–¢–¨ –ü–ê–†–°–ï–† –ü–õ–ê–ù–®–ï–¢–ö–ò (–î–õ–Ø –ì–†–£–ü–ü–´/–î–õ–Ø –ü–†–ï–ü–û–î–ê)
        check_day()
        plans—Äetka()
        load_pl()
        os.remove(f'result/{user_id}.txt')
        try: 
            group_parse(group=f'{msg.split(" ")[-1]}', user_id=user_id)
            with open(f'result/{user_id}.txt', 'r', encoding='utf-8') as doc:
             await message.answer(doc.read())
             
        except:
            teacher_parse(teacher=f'{msg.split(" ")[-2]} {msg.split(" ")[-1]}', user_id=user_id)
            with open(f'result/{user_id}.txt', 'r', encoding='utf-8') as doc:
             await message.answer(doc.read())

    if msg.lower() == '–∑–≤–æ–Ω–∫–∏':
        await message.answer(bells, parse_mode=ParseMode.HTML)

    if msg.lower() == '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn = types.KeyboardButton(text=f'—Å—Ç—É–¥–µ–Ω—Ç', resize_keyboard=True)
        btn1 = types.KeyboardButton(text=f'–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', resize_keyboard=True)
        keyboard.add(btn, btn1)
        await message.answer('–ö–µ–º —Ç—ã —è–≤–ª—è–µ—à—å—Å—è? \n[—Å—Ç—É–¥–µ–Ω—Ç/–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å]', reply_markup=markup)
        await Form.category.set()
    
    if msg.lower().split(' ')[0] == '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
        sql.execute(f"UPDATE users SET MAILING={1} WHERE ID={user_id}")
        db.commit()
        await message.answer('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!')

    if msg.lower() == '–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è':
        sql.execute(f"UPDATE users SET MAILING={0} WHERE ID={user_id}")
        db.commit()
        await message.answer('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã!')

    if (msg.lower() == '–ø–æ–º–æ—â—å/faq') and (category == '—Å—Ç—É–¥–µ–Ω—Ç'):
        await message.answer(ManStud)

    if (msg.lower() == '–ø–æ–º–æ—â—å/faq') and (category == '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å'):
        await message.answer(ManTeach)

    if msg.lower() == '–∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
        await message.answer(contact_info, parse_mode=ParseMode.HTML)

    if msg.lower() == '—Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã':
        await message.answer(OperatingMode, parse_mode=ParseMode.HTML)

    if msg.lower() == '–ø–æ–¥–¥–µ—Ä–∂–∫–∞':
        await message.answer('<i>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ/–∑–∞–¥–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –≤–æ–ø—Ä–æ—Å—ã...</i>', parse_mode=ParseMode.HTML)
        await Form.support_ask.set()

    if (len(msg.lower().split(' ')) == 3) and (msg.lower().split(' ')[0] == '—É—á–µ–±–Ω—ã–π'):
        content = msg.split(' ')
        with open(f'TEXT/AcademicPlan/{content[-1].split("-")[0].upper()}.pdf', 'rb') as doc:
            await message.answer_document(doc, caption=f'–£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã {content[-1]}')

    if msg.lower() == '–∑–∞—è–≤–ª–µ–Ω–∏—è':
        markup = types.InlineKeyboardMarkup(row_width=True)
        lk1 = types.InlineKeyboardButton(text='–ü–ï–†–ï–ô–¢–ò –ö –°–ü–ò–°–ö–£‚ôªÔ∏è', url='https://drive.google.com/drive/folders/1-l17za1XrEvsE4JndjJG9k3zGYnCN4r4') 
        markup.add(lk1)
        await message.answer('<i> –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞—è–≤–ª–µ–Ω–∏—è –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π </i>', reply_markup=markup, parse_mode=ParseMode.HTML)

    if msg.lower() == '–∑–∞–º–µ—Ç–∫–∞':
        if str(category).lower() == '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å':
            await message.answer('<b>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ –¥–∞–Ω–Ω–æ–º—É –ø—Ä–∏–º–µ—Ä—É:</b>\n\n<i>[–¥–∞—Ç–∞ –¥–¥.–º–º.–≥–≥–≥–≥]\n[–≥—Ä—É–ø–ø–∞/–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å]\n[–ø—Ä–µ–¥–º–µ—Ç:]\n<b> —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è </b>  </i>', parse_mode=ParseMode.HTML)
            await Form.AddNote.set()
        else:
            await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏')

    if msg.lower() == '—Å–æ–æ–±—â–µ–Ω–∏–µ':
        if str(category).lower() == '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å':
            await message.answer('<b>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ –¥–∞–Ω–Ω–æ–º—É –ø—Ä–∏–º–µ—Ä—É:</b>\n\n<i>[–≥—Ä—É–ø–ø–∞/–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å/–≤–Ω–∏–º–∞–Ω–∏–µ]\n<b> —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è </b>  </i>', parse_mode=ParseMode.HTML)
            await Form.notification.set()
        else:
            await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏')

    if (len(msg.lower().split(' ')) == 2) and (msg.lower().split(' ')[0] == '–∑–∞–º–µ—Ç–∫–∞'):
            for NumGroup in sql.execute(f"SELECT NUMGROUP FROM users WHERE ID={user_id}"):
                for content in sql.execute(f"SELECT CONTENTS FROM tasks WHERE DATE='{msg.lower().split(' ')[1]}' AND NUMGROUP='{NumGroup[0]}' "):
                    msg = str(content[0]).replace('/n', '\n')
                    print(msg)
                    await message.answer(msg)

    if (len(msg.lower().split(' ')) == 3) and (msg.lower().split(' ')[0] == '–∫–æ–Ω—Ç–∞–∫—Ç'):
        msg = msg.lower().split(" ")
        for PhoneNumber in sql.execute(f"SELECT PHONENUMBER FROM contacts WHERE FULLNAME='{msg[1]} {msg[2]}'"):
            for Telegram in sql.execute(f"SELECT TELEGRAM FROM contacts WHERE FULLNAME='{msg[1]} {msg[2]}'"):
                for email in sql.execute(f"SELECT MAIL FROM contacts WHERE FULLNAME='{msg[1]} {msg[2]}'"):
                    for fio in sql.execute(f"SELECT FIO FROM contacts WHERE FULLNAME='{msg[1]} {msg[2]}'"):
                        await message.answer(f'<b>{fio[0]}</b>\n\n—Ç–µ–ª–µ—Ñ–æ–Ω - {PhoneNumber[0]}\n–¢–µ–ª–µ–≥—Ä–∞–º - {Telegram[0]}\n –ü–æ—á—Ç–∞ - {email[0]}', parse_mode=ParseMode.HTML)

    if (msg.lower().split(' ')[0] == '–¥–æ–±–∞–≤–∏—Ç—å') and (msg.lower().split(' ')[1] == '–∫–æ–Ω—Ç–∞–∫—Ç'):
        for category in sql.execute(f"SELECT CATEGORY FROM users WHERE ID={user_id}"):
            category = category[0]

        if category.lower() == '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å':
            await message.answer('<b>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ –¥–∞–Ω–Ω–æ–º—É –ø—Ä–∏–º–µ—Ä—É:</b>\n\n<i>[–§–∞–º–∏–ª–∏—è –ò.–û.]\n[–§–ò–û]\n[–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞]\n[–¢–µ–ª–µ–≥—Ä–∞–º]\n[–ü–æ—á—Ç–∞]\n  </i>', parse_mode=ParseMode.HTML)
            sql.execute(f"INSERT INTO contacts (FULLNAME) VALUES ('{msg.lower().split(' ')[-1]}')")
            await Form.addcontacts.set()
        else:
            await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!')


@dp.message_handler(state=Form.addcontacts)
async def AddNote(message: types.Message):
    user_id = message.from_user.id
    msg = message.text
    msg = msg.split('\n')
    sql.execute(f"INSERT INTO contacts (FULLNAME, FIO, PHONENUMBER,TELEGRAM, MAIL) VALUES ('{msg[0].lower()}', '{msg[1]}', '{msg[2]}', '{msg[3]}' , '{msg[4]}')")
    db.commit()

    await message.answer('<i>–ö–æ–Ω—Ç–∞–∫—Ç—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã, –≤—ã –±—ã–ª–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ –º–µ–Ω—é...</i>', parse_mode=ParseMode.HTML)
    await Form.Meny.set()


@dp.message_handler(state=Form.AddNote)
async def AddNote(message: types.Message):
    msg = message.text

    content = msg.split('\n')
    print(content)
    try:
        for contents in sql.execute(f"SELECT CONTENTS FROM tasks WHERE DATE={content[0]} AND NUMGROUP={content[1].lower()} "):
            sql.execute(f"UPDATE tasks SET CONTENTS='{f'{contents[0]} /n {content[-2]}{content[-1]}'}' WHERE DATE={content[0]} AND NUMGROUP={content[1].lower()} ")
            db.commit()
    except:
        sql.execute(f"INSERT INTO tasks (DATE, NUMGROUP, CONTENTS) VALUES ('{content[0]}', '{content[1].lower()}', '{content[-2]}{content[-1]}')")
        db.commit()
    finally:
        db.commit()
        await message.answer('<i>–ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞, –≤—ã –±—ã–ª–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ –º–µ–Ω—é...</i>', parse_mode=ParseMode.HTML)
        await Form.Meny.set()

@dp.message_handler(state=Form.notification)
async def AddNote(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    msg = message.text
    for NumGroup in sql.execute(f"SELECT NUMGROUP FROM users WHERE ID={user_id}"):
        FullName = NumGroup[0]

    content = msg.split('\n')
    if content[0].lower() == '–≤–Ω–∏–º–∞–Ω–∏–µ ':
        content.pop(0)
        msg = ''.join(content)
        print(msg)
        for i in sql.execute(f"SELECT ID FROM users WHERE MAILING={1}"):
            print(i[0])
            await bot.send_message(i[0], f"<a href='https://t.me/{username}'>{FullName}</a>\n{msg}", parse_mode=ParseMode.HTML)

    else:
        print(content[0].lower())
        for UserID in sql.execute(f"SELECT ID FROM users WHERE NUMGROUP='{content[0].lower()}' "): 
            for mailing in sql.execute(f"SELECT MAILING FROM users WHERE ID={UserID[0]}"):
                print(UserID[0])
                print(mailing)
                content.pop(0)
                msg = ''.join(content)
                if mailing[0] == 1:
                    await bot.send_message(UserID[0], f"<a href='https://t.me/{username}'>{FullName}</a>\n{msg}", parse_mode=ParseMode.HTML)
       
    db.commit()
    await message.answer('<i>–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –≤—ã –±—ã–ª–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ –º–µ–Ω—é...</i>', parse_mode=ParseMode.HTML)
    await Form.Meny.set()


@dp.message_handler(state=Form.support_ask)
async def AddNote(message: types.Message):
    user_id = message.from_user.id
    msg = message.text
    await bot.send_message(809727326, f'{user_id}\n\n{msg}')
    await message.answer('<i>–û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –≤—ã –±—ã–ª–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ –º–µ–Ω—é...</i>', parse_mode=ParseMode.HTML)
    await Form.Meny.set()

@dp.message_handler(state=Form.support)
async def AddNote(message: types.Message):
    user_id = message.from_user.id
    msg = message.text
    msg = msg.split('\n')
    await bot.send_message(msg[0], f'–ü–æ–¥–¥–µ—Ä–∂–∫–∞...\n\n{msg[1]}')
    await message.answer('<i>–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –≤—ã –±—ã–ª–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ –º–µ–Ω—é...</i>', parse_mode=ParseMode.HTML)
    await Form.support.set()



if __name__ =='__main__':
    executor.start_polling(dp)